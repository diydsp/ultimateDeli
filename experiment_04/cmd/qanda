#!/usr/bin/python

# convert features into questions and answers for machine to
# learn to separate

import onehot as oh

#print( 'question:      ' + filename_question )
#print( 'answer:        ' + filename_answer )
#print( 'answer_onehot: ' + filename_answer_onehot )



    # write questions to file
    question_out = open( filename_question, 'w' )
    indic_arr_len = len( indicator_array )
    # note predicting following day, so N-1 data rows
    np.save( question_out, indicator_array[ 0: indic_arr_len - 1 ] )
    question_out.close()

    # also save in .csv for easy verification
    #a_tmp = np.as
    np.savetxt( filename_output, indicator_array, delimiter=',')
        

    # create answers
    # convert answers to onehot
    num_classes = 3
    answer_onehot = np.zeros( ( len( indicator_array ) - 1, num_classes ) )

    # first compute all ratios
    ratios = np.zeros( indic_arr_len )
    ratio_select = int( args.ratio_select )
    print( 'Using ratio_select ', ratio_select )
    if ratio_select == None:
        quit()
    for idx in range( indic_arr_len - 2 ):

        open_yest   = indicator_array[ 0 + idx ][ 0 ]
        high_yest   = indicator_array[ 0 + idx ][ 1 ]
        low_yest    = indicator_array[ 0 + idx ][ 2 ]
        close_yest  = indicator_array[ 0 + idx ][ 3 ]

        open_today  = indicator_array[ 1 + idx ][ 0 ]
        high_today  = indicator_array[ 1 + idx ][ 1 ]
        low_today   = indicator_array[ 1 + idx ][ 2 ]
        close_today = indicator_array[ 1 + idx ][ 3 ]
            
        open_tmw    = indicator_array[ 2 + idx ][ 0 ]
        high_tmw    = indicator_array[ 2 + idx ][ 1 ]
        low_tmw     = indicator_array[ 2 + idx ][ 2 ]
        close_tmw   = indicator_array[ 2 + idx ][ 3 ]

        if ratio_select == 16:
            ratio = high_tmw / open_tmw
        if ratio_select == 17:
            ratio = low_tmw / open_tmw
        if ratio_select == 18:
            ratio = close_tmw / open_tmw


        if ratio_select == 0:
            ratio = open_tmw / open_today
        if ratio_select == 1:
            ratio = open_tmw / high_today
        if ratio_select == 2:
            ratio = open_tmw / low_today
        if ratio_select == 3:
            ratio = open_tmw / close_today

        if ratio_select == 4:
            ratio = high_tmw / open_today
        if ratio_select == 5:
            ratio = high_tmw / high_today
        if ratio_select == 6:
            ratio = high_tmw / low_today
        if ratio_select == 7:
            ratio = high_tmw / close_today

        if ratio_select == 8:
            ratio = low_tmw / open_today
        if ratio_select == 9:
            ratio = low_tmw / high_today
        if ratio_select == 10:
            ratio = low_tmw / low_today
        if ratio_select == 11:
            ratio = low_tmw / close_today
                
        if ratio_select == 12:
            ratio = close_tmw / open_today
        if ratio_select == 13:
            ratio = close_tmw / high_today
        if ratio_select == 14:
            ratio = close_tmw / low_today
        if ratio_select == 15:
            ratio = close_tmw / close_today

        #print( ratio )
        ratios[ idx ] = ratio
            
    # auto-generate thresholds
    sorted_ratios = np.sort( ratios )

    for idx in range( len( sorted_ratios )):
        print( sorted_ratios[ idx ] )



    index_upper = int( 0.666 * indic_arr_len )
    index_lower = int( 0.333 * indic_arr_len )
    thresh_upper = sorted_ratios[ index_upper ]
    thresh_lower = sorted_ratios[ index_lower ]
    print( thresh_upper )
    print( thresh_lower )

    # now classify each ratio
    for idx in range( indic_arr_len - 1 ):

        class_num = 1
        if ratios[ idx ] > thresh_upper:
            class_num = 2
        if ratios[ idx ] < thresh_lower:
            class_num = 0

        temp = oh.int2onehot( class_num, num_classes )
        for dst_x in range( num_classes ):
            answer_onehot[ idx, dst_x ] = temp[ dst_x ]
                        
            
    print( answer_onehot[ 1:800 ] )
    print answer_onehot.sum( axis = 0 )
                        
    # write answer_onehot to file
    #filename_out = out_dir + '/' + 'answer_onehot.npy'
    answer_onehot_out = open( filename_answer_onehot, 'w' )
    #answer_onehot_out = open( 'answer_onehot.npy', 'w' )
    np.save( answer_onehot_out, answer_onehot )
    answer_onehot_out.close()
        



    # different type of answer, non-categorized
    answer = np.zeros( ( len( indicator_array ) - 1 ) )
    for idx in range( indic_arr_len - 1 ):

        open_tmw  = indicator_array[ 1 + idx ][ 0 ]
        answer[ idx ] = open_tmw

    # write answer to file
    #filename_out = out_dir + '/' + 'answer.npy'
    answer_out = open( filename_answer, 'w' )
    np.save( answer_out, answer )
    answer_out.close()
    
        

